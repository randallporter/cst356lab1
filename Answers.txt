Exercise 1

Using Visual Studio, create the sample ASP.NET MVC application that uses C#.  Do not include authentication or Azure hosting.

Start the application from Visual Studio.

Click on the "About" link in the navigation bar.  What code in the application just got executed?  Hint: Look at the address bar in the browser.
-The HomeController and the About() function.

Click on the "Application name" in the navigation bar to return to the home page.

In the address bar of the browser, add /home/about to the end of the URL (after the port number) and hit enter.  Think about what happened in terms of MVC routing.
Same thing as clicking the link to the about section

Exercise 2

Find the controller that generates the Contact page.  What part of that controller actually generates the page?
-The homeController is the controller that runs and the Contact() Action Result is called.

What data is being generated by the controller to be displayed in the page?
-ViewBag.Message is being given a value.

Find the view that the controller invokes to display the page.
-The default page is invoked by the default route on the home controller and the index action.

What folder hierarchy convention do you see that allows the framework to find the correct view?
-There is a "view" folder and inside is a folder that is named like the controller and then inside that each action result method needs a corresponding view.

Find the place in the view where the data generated by the controller is displayed.  This is a simple example of the Razor syntax for adding server side logic to a view.

Exercise 3

Create a new controller for the "Person" entity in your application with an "Index" method for displaying information for a person.  Use the HomeController as an example.

Start the application in Visual Studio.

Go to the address bar and enter Person after the port number in the URL.  Hit enter.  What do you see?
-Error message. The view 'Index' or its master was not found or no view engine....

Create a view for displaying a person.  Use one of the other views to guide you.

Repeat steps 2 and 3.  What do you see now?
-I see the view I created.

Add "person" data to the ViewBag in your new controller.
-

Add the display of the new "person" data to the view that you created.
-

Repeat steps 2 and 3.  What do you see now?
-The changes I made to viewbag.message.

Exercise 4

Add a "Person" model to your project containing data that you think is relevant for your project.

Exercise 5

Put the code you created today up on your GitHub repository.